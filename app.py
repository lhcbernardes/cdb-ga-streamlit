import streamlit as st
import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
from deap import base, creator, tools, algorithms
import random
from datetime import datetime
from io import BytesIO
import requests
import time
import copy
import concurrent.futures

# Configura√ß√£o da p√°gina com layout wide e √≠cone
st.set_page_config(page_title="GA Tesouro Direto Otimizador", layout="wide", page_icon="üìà")

# Injetar CSS personalizado para melhores efeitos visuais (cores, bot√µes, etc.)
st.markdown(
    """
    <style>
    .stButton > button {
        background-color: #4CAF50; /* Verde atraente */
        color: white;
        border: none;
        padding: 10px 20px;
        text-align: center;
        text-decoration: none;
        display: inline-block;
        font-size: 16px;
        margin: 4px 2px;
        cursor: pointer;
        border-radius: 12px;
        transition: background-color 0.3s;
    }
    .stButton > button:hover {
        background-color: #45a049;
    }
    .stSpinner > div {
        color: #4CAF50;
    }
    .stAlert, .stAlert * {
        color: #000 !important;
        background-color: #f0f2f6 !important;
        opacity: 1 !important;
    }
    .element-container .stMarkdown {
        font-family: 'Arial', sans-serif;
    }
    </style>
    """,
    unsafe_allow_html=True
)

st.title("üìà Otimiza√ß√£o de Portf√≥lio - Tesouro Direto")

# Expander com explica√ß√£o resumida e visualmente atraente
with st.expander("‚ÑπÔ∏è Como o Score √© Calculado", expanded=False):
    st.markdown("""
    O **score** do portf√≥lio √© calculado de forma multiobjetivo, otimizando **retorno**, **risco** e **diversifica√ß√£o** simultaneamente usando NSGA-II. O algoritmo busca automaticamente o melhor equil√≠brio entre esses crit√©rios, gerando uma fronteira de Pareto com v√°rias op√ß√µes de portf√≥lios para voc√™ escolher.

    - **Retorno** üìä: M√©dia das taxas anuais dos t√≠tulos do portf√≥lio.
    - **Risco** ‚è≥: Desvio padr√£o das rentabilidades, indicando a volatilidade.
    - **Diversifica√ß√£o** üåü: Quantidade de tipos diferentes de t√≠tulos no portf√≥lio.

    > O app sempre utiliza otimiza√ß√£o multiobjetivo, n√£o sendo necess√°rio escolher uma estrat√©gia manualmente.
    """)

# Fun√ß√£o para carregar dados com cache para efici√™ncia
@st.cache_data(ttl=3600)  # Cache por 1 hora
def carregar_dados():
    try:
        url = "https://drive.usercontent.google.com/uc?id=1aYGWSsM0A2slQwfC-nwz-WR7e3-WnVXM&export=download"
        r = requests.get(url, stream=True, timeout=30)
        r.raise_for_status()
        content = BytesIO()
        for chunk in r.iter_content(1024):
            content.write(chunk)
        content.seek(0)
        df = pd.read_csv(content, sep=";", encoding="utf-8")
        
        # Processamento de dados
        df["Data Vencimento"] = pd.to_datetime(df["Data Vencimento"], dayfirst=True, errors="coerce")
        df["Data Base"] = pd.to_datetime(df["Data Base"], dayfirst=True, errors="coerce")
        df["Rentabilidade"] = df["Taxa Compra Manha"].str.replace(",", ".").astype(float)
        df["Prazo"] = (df["Data Vencimento"] - df["Data Base"]).dt.days
        return df
    except Exception as e:
        st.error(f"Erro ao carregar dados: {e}")
        return pd.DataFrame()

# Carregar dados com spinner visual
with st.spinner("üì• Baixando dados do Tesouro Direto..."):
    raw_df = carregar_dados()

# Filtrar t√≠tulos futuros
raw_df = raw_df[raw_df["Data Vencimento"] > datetime.now()].copy()

if raw_df.empty:
    st.error("Nenhum t√≠tulo com vencimento futuro dispon√≠vel. Tente novamente mais tarde.")
    st.stop()

st.success(f"‚úÖ {len(raw_df)} t√≠tulos com vencimento futuro carregados.")

# Exibir pr√©via dos dados em um expander para n√£o poluir a tela
with st.expander("üìã Pr√©via dos Dados", expanded=False):
    st.dataframe(raw_df.head())

# Sidebar com par√¢metros, organizado visualmente
st.sidebar.header("‚öôÔ∏è Par√¢metros do Algoritmo")
POP_SIZE = st.sidebar.slider("Tamanho da Popula√ß√£o", 50, 500, 100, step=50, help="N√∫mero de portf√≥lios iniciais. Popula√ß√µes maiores aumentam a diversidade, mas deixam o algoritmo mais lento.")
NGEN = st.sidebar.slider("M√°ximo de Gera√ß√µes", 10, 500, 100, step=10, help="Quantas itera√ß√µes o algoritmo far√°. Mais gera√ß√µes aumentam a chance de encontrar bons portf√≥lios.")
CXPB = st.sidebar.slider("Probabilidade de Crossover", 0.5, 1.0, 0.7, step=0.05, help="Chance de combinar portf√≥lios (recombina√ß√£o gen√©tica). Valores altos aumentam a explora√ß√£o.")
MUTPB = st.sidebar.slider("Probabilidade de Muta√ß√£o", 0.5, 1.0, 0.9, step=0.05, help="Chance de alterar portf√≥lios (introduzir novidades). Valores altos aumentam a diversidade.")
N_ATIVOS = st.sidebar.slider("T√≠tulos por Portf√≥lio", 3, min(10, len(raw_df)), 5, help="Quantos t√≠tulos em cada portf√≥lio. Portf√≥lios maiores tendem a ser mais diversificados.")
# Estrat√©gia agora √© sempre multiobjetivo, mas mantenho o selectbox para explicar
st.sidebar.selectbox("Estrat√©gia de Score", ["Multi-Objetivo"], help="Agora sempre otimiza retorno, risco e diversidade simultaneamente (NSGA-II).", index=0, disabled=True)

# Par√¢metros avan√ßados
with st.sidebar.expander("üîß Par√¢metros Avan√ßados", expanded=False):
    ELITE_SIZE = st.slider("Tamanho da Elite (%)", 5, 20, 10, step=5, help="Percentual dos melhores indiv√≠duos a preservar em cada gera√ß√£o.")
    TOURNAMENT_SIZE = st.slider("Tamanho do Torneio", 2, 8, 4, step=1, help="Tamanho do torneio para sele√ß√£o dos pais.")
    DIVERSITY_THRESHOLD = st.slider("Limiar de Diversidade", 0.1, 0.9, 0.3, step=0.1, help="Limiar para reinicializa√ß√£o por diversidade. Se a popula√ß√£o ficar muito parecida, parte dela √© renovada.")

# Valida√ß√£o de par√¢metros
if len(raw_df) < N_ATIVOS:
    st.error(f"‚ùå Quantidade de t√≠tulos dispon√≠veis ({len(raw_df)}) √© menor que o n√∫mero por portf√≥lio ({N_ATIVOS}). Ajuste os par√¢metros.")
    st.stop()

# Configura√ß√µes do DEAP - CORRE√á√ÉO DOS ERROS DE LINTER
try:
    del creator.FitnessMax  # type: ignore
except:
    pass
try:
    del creator.FitnessMulti  # type: ignore
except:
    pass
try:
    del creator.Individual  # type: ignore
except:
    pass

# Fitness para problemas single-objective e multi-objective
creator.create("FitnessMax", base.Fitness, weights=(1.0,))  # type: ignore
creator.create("FitnessMulti", base.Fitness, weights=(1.0, -1.0, 1.0))  # Retorno (max), Risco (min), Diversidade (max)
creator.create("Individual", list, fitness=creator.FitnessMulti)  # type: ignore

# Fun√ß√µes auxiliares melhoradas
def gerar_indices():
    """Gera √≠ndices √∫nicos para representar um portf√≥lio"""
    return random.sample(range(len(raw_df)), N_ATIVOS)

def repair(ind):
    """Repara indiv√≠duo removendo duplicatas e garantindo tamanho correto"""
    unique = list(dict.fromkeys(ind))
    while len(unique) < N_ATIVOS:
        novo = random.randint(0, len(raw_df) - 1)
        if novo not in unique:
            unique.append(novo)
    return unique[:N_ATIVOS]

def calcular_diversidade(populacao):
    """Calcula a diversidade da popula√ß√£o baseada na dist√¢ncia m√©dia entre indiv√≠duos"""
    if len(populacao) < 2:
        return 0.0
    
    distancias = []
    for i in range(len(populacao)):
        for j in range(i+1, len(populacao)):
            # Dist√¢ncia baseada na sobreposi√ß√£o de t√≠tulos
            overlap = len(set(populacao[i]) & set(populacao[j])) / N_ATIVOS
            distancias.append(1 - overlap)
    
    return np.mean(distancias) if distancias else 0.0

# Operadores gen√©ticos melhorados
def crossover_uniforme(ind1, ind2):
    """Crossover uniforme melhorado para portf√≥lios"""
    child1 = []
    child2 = []
    
    # Usar m√°scara aleat√≥ria para decidir de qual pai pegar cada posi√ß√£o
    mask = [random.random() < 0.5 for _ in range(N_ATIVOS)]
    
    for i in range(N_ATIVOS):
        if mask[i]:
            child1.append(ind1[i])
            child2.append(ind2[i])
        else:
            child1.append(ind2[i])
            child2.append(ind1[i])
    
    # Reparar duplicatas
    child1 = repair(child1)
    child2 = repair(child2)
    
    return creator.Individual(child1), creator.Individual(child2)  # type: ignore

def mutacao_inteligente(ind, indpb=0.3):
    """Muta√ß√£o inteligente que preserva alguns t√≠tulos bons"""
    if random.random() < indpb:
        ind_copy = list(ind)
        
        # Muta√ß√£o por substitui√ß√£o parcial
        num_mutations = max(1, int(N_ATIVOS * 0.3))  # 30% dos t√≠tulos
        positions = random.sample(range(N_ATIVOS), num_mutations)
        
        for pos in positions:
            # Substituir por um t√≠tulo aleat√≥rio
            novo_titulo = random.randint(0, len(raw_df) - 1)
            while novo_titulo in ind_copy:
                novo_titulo = random.randint(0, len(raw_df) - 1)
            ind_copy[pos] = novo_titulo
        
        return creator.Individual(ind_copy),  # type: ignore
    return ind,

def mutacao_swap(ind, indpb=0.2):
    """Muta√ß√£o por troca de posi√ß√µes"""
    if random.random() < indpb:
        ind_copy = list(ind)
        # Trocar duas posi√ß√µes aleat√≥rias
        pos1, pos2 = random.sample(range(N_ATIVOS), 2)
        ind_copy[pos1], ind_copy[pos2] = ind_copy[pos2], ind_copy[pos1]
        return creator.Individual(ind_copy),  # type: ignore
    return ind,

# Fun√ß√£o de avalia√ß√£o adaptada para NSGA-II

def evaluate(ind):
    try:
        selected = raw_df.iloc[ind]
        # Sempre retornar os tr√™s objetivos para NSGA-II
        retorno = selected["Rentabilidade"].mean()
        risco = selected["Rentabilidade"].std() or 0.1
        diversidade = selected["Tipo Titulo"].nunique()
        return (retorno, risco, diversidade)
    except Exception as e:
        st.warning(f"Erro na avalia√ß√£o: {e}")
        return (0.0, 0.1, 1.0)

# Cria toolbox e registrar fun√ß√µes melhoradas
toolbox = base.Toolbox()
toolbox.register("indices", gerar_indices)
toolbox.register("individual", tools.initIterate, creator.Individual, toolbox.indices)  # type: ignore
toolbox.register("population", tools.initRepeat, list, toolbox.individual)  # type: ignore
toolbox.register("mate", crossover_uniforme)
toolbox.register("mutate", mutacao_inteligente)
toolbox.register("mutate_swap", mutacao_swap)
toolbox.register("evaluate", evaluate)

# Sele√ß√£o adaptada: NSGA-II para multiobjetivo, torneio para os demais
toolbox.unregister("select") if hasattr(toolbox, "select") else None
toolbox.register("select", tools.selNSGA2)
# Trocar fitness dos indiv√≠duos existentes para multiobjetivo
creator.Individual.fitness = creator.FitnessMulti

# Paraleliza√ß√£o: usar ThreadPoolExecutor para compatibilidade com Streamlit
pool = concurrent.futures.ThreadPoolExecutor()
toolbox.register("map", pool.map)

# Fun√ß√£o para plotar evolu√ß√£o com tema visual melhorado
def plot_evolucao(log):
    gens, melhores, medias = zip(*log) if log else ([], [], [])
    fig, ax = plt.subplots(figsize=(6, 4))
    plt.style.use('seaborn-v0_8')
    ax.plot(gens, melhores, label="Melhor Score", color='green', linewidth=2)
    ax.plot(gens, medias, label="M√©dia da Popula√ß√£o", color='blue', linestyle='--', linewidth=1.5)
    ax.set_title("Evolu√ß√£o da Otimiza√ß√£o", fontsize=12)
    ax.set_xlabel("Gera√ß√£o", fontsize=10)
    ax.set_ylabel("Score", fontsize=10)
    ax.legend(fontsize=8)
    ax.grid(True, linestyle='--', alpha=0.7)
    ax.tick_params(labelsize=8)
    fig.tight_layout()
    return fig

# Fun√ß√£o principal de otimiza√ß√£o melhorada
def rodar_otimizacao():
    """Algoritmo gen√©tico melhorado com diversidade e early stopping"""
    # Seed fixo para reproducibilidade
    random.seed(42)
    
    # Inicializar popula√ß√£o
    pop = toolbox.population(n=POP_SIZE)  # type: ignore
    # Avalia√ß√£o paralela da popula√ß√£o inicial
    fitnesses = list(toolbox.__getattribute__('map')(toolbox.__getattribute__('evaluate'), pop))
    for ind, fit in zip(pop, fitnesses):
        ind.fitness.values = fit  # type: ignore

    # Placeholder para gr√°fico e barra de progresso
    grafico_area = st.empty()
    progress_bar = st.progress(0)
    log = []
    best_score = -np.inf
    no_improvement = 0
    early_stop_limit = 20  # Aumentado para dar mais chance
    elite_size = max(1, int(POP_SIZE * ELITE_SIZE / 100))

    for g in range(1, NGEN + 1):
        offspring = algorithms.varAnd(pop, toolbox, cxpb=CXPB, mutpb=MUTPB)
        for ind in offspring:
            ind[:] = repair(ind)
            fit = toolbox.__getattribute__('evaluate')(ind)
            ind.fitness.values = fit  # Avalia√ß√£o sequencial para garantir atualiza√ß√£o do gr√°fico

        # Elitismo melhorado
        elite = tools.selBest(pop, k=elite_size)
        pop = toolbox.select(pop + offspring, k=POP_SIZE - len(elite)) + elite  # type: ignore

        # Calcular m√©tricas
        melhor = tools.selBest(pop, k=1)[0]
        media = np.mean([i.fitness.values[0] for i in pop if i.fitness.valid])
        log.append((g, melhor.fitness.values[0], media))

        # Atualizar gr√°fico em tempo real
        fig = plot_evolucao(log)
        grafico_area.pyplot(fig)
        plt.close(fig)

        # Atualizar progresso
        progress_bar.progress(g / NGEN)

        # Early stopping melhorado
        if melhor.fitness.values[0] > best_score:
            best_score = melhor.fitness.values[0]
            no_improvement = 0
        else:
            no_improvement += 1
        
        # Verificar diversidade
        diversidade = calcular_diversidade(pop)
        if diversidade < DIVERSITY_THRESHOLD and g > 10:
            # Reinicializar parte da popula√ß√£o para manter diversidade
            num_reinit = int(POP_SIZE * 0.2)
            for _ in range(num_reinit):
                novo_ind = toolbox.individual()  # type: ignore
                novo_ind.fitness.values = toolbox.evaluate(novo_ind)  # type: ignore
                pop[random.randint(0, len(pop)-1)] = novo_ind
        
        if no_improvement >= early_stop_limit:
            st.info(f"üõë Otimiza√ß√£o parou na gera√ß√£o {g} devido a estagna√ß√£o (sem melhorias).")
            break
        
        # Pequeno delay para efeito "tempo real"
        time.sleep(0.05)  # Reduzido para melhor performance

    return pop, log

# Bot√£o para rodar com estilo visual
if st.button("üöÄ Rodar Otimiza√ß√£o", help="Inicie a otimiza√ß√£o com os par√¢metros selecionados."):
    import time as _time
    start_time = _time.time()
    with st.spinner("üîÑ Otimizando portf√≥lio... Aguarde!"):
        pop, log = rodar_otimizacao()
    elapsed = _time.time() - start_time
    st.success(f"‚úÖ Otimiza√ß√£o conclu√≠da em {elapsed:.2f} segundos!")

    if not pop:
        st.error("‚ùå Erro na otimiza√ß√£o. Verifique os par√¢metros e tente novamente.")
        st.stop()

    # --- NOVA INTERFACE EM TABS ---
    tabs = st.tabs(["Resumo", "Fronteira de Pareto", "Detalhes do Portf√≥lio", "Configura√ß√µes Avan√ßadas", "Ajuda"])

    # --- FRONTEIRA DE PARETO ---
    with tabs[1]:
        st.subheader("üåà Fronteira de Pareto (Portf√≥lios N√£o-Dominados)")
        # Identificar n√£o-dominados
        pareto = tools.sortNondominated(pop, k=len(pop), first_front_only=True)[0]
        pareto_df = pd.DataFrame([
            {
                'Retorno (%)': raw_df.iloc[ind]["Rentabilidade"].mean(),
                'Risco (%)': raw_df.iloc[ind]["Rentabilidade"].std(),
                'Diversidade': raw_df.iloc[ind]["Tipo Titulo"].nunique(),
                '√çndices': ind
            }
            for ind in pareto
        ])
        st.dataframe(pareto_df, use_container_width=True)
        # Exportar Pareto
        csv = pareto_df.to_csv(index=False).encode('utf-8')
        st.download_button("‚¨áÔ∏è Baixar Fronteira de Pareto (CSV)", csv, "pareto.csv", "text/csv")
        # Sele√ß√£o de portf√≥lio
        idx = st.selectbox("Selecione um portf√≥lio para detalhes:", range(len(pareto)), format_func=lambda i: f"Portf√≥lio {i+1}")
        port_sel = pareto[idx]
        st.success(f"Portf√≥lio {idx+1} selecionado para an√°lise detalhada.")

        # --- GR√ÅFICO DE PARETO ---
        st.markdown("**Gr√°fico de Pareto: Risco vs. Retorno**")
        fig, ax = plt.subplots(figsize=(6, 4))
        riscos = pareto_df['Risco (%)']
        retornos = pareto_df['Retorno (%)']
        ax.scatter(riscos, retornos, alpha=0.7, color='blue', label='Fronteira de Pareto')
        # Destacar o portf√≥lio selecionado
        ax.scatter(riscos.iloc[idx], retornos.iloc[idx], color='red', s=120, label=f'Selecionado ({idx+1})')
        ax.set_title("Fronteira de Pareto (Risco x Retorno)", fontsize=12)
        ax.set_xlabel("Risco (Desvio Padr√£o)", fontsize=10)
        ax.set_ylabel("Retorno M√©dio (%)", fontsize=10)
        ax.legend(fontsize=8)
        ax.grid(True, linestyle='--', alpha=0.7)
        ax.tick_params(labelsize=8)
        fig.tight_layout()
        st.pyplot(fig)

    # --- DETALHES DO PORTF√ìLIO SELECIONADO ---
    with tabs[2]:
        st.subheader(f"üîé Detalhes do Portf√≥lio Selecionado (Portf√≥lio {idx+1})")
        resultado = raw_df.iloc[port_sel].copy()
        st.dataframe(resultado.style.format({"Rentabilidade": "{:.2f}%", "Prazo": "{:.0f} dias"}))
        # Exportar portf√≥lio
        csv_port = resultado.to_csv(index=False).encode('utf-8')
        st.download_button("‚¨áÔ∏è Baixar Portf√≥lio Selecionado (CSV)", csv_port, f"portfolio_{idx+1}.csv", "text/csv")
        # Gr√°fico de pizza da composi√ß√£o por tipo
        tipo_counts = resultado["Tipo Titulo"].value_counts()
        fig1, ax1 = plt.subplots()
        ax1.pie(tipo_counts, labels=tipo_counts.index, autopct='%1.0f%%', startangle=90)
        ax1.axis('equal')
        st.pyplot(fig1)
        # Gr√°fico de barras de rentabilidade
        fig2, ax2 = plt.subplots()
        resultado.plot.bar(x="Tipo Titulo", y="Rentabilidade", ax=ax2, color="#4CAF50")
        st.pyplot(fig2)

    # --- RESUMO (MELHOR PORTF√ìLIO) ---
    with tabs[0]:
        st.subheader("üèÜ Melhor Portf√≥lio Encontrado")
        melhor = tools.selBest(pop, k=1)[0]
        resultado = raw_df.iloc[melhor].copy()
        resultado["Score"] = melhor.fitness.values[0]
        st.dataframe(resultado.style.format({"Rentabilidade": "{:.2f}%", "Prazo": "{:.0f} dias"}))
        st.markdown(f"""
        - **Score Final**: {melhor.fitness.values[0]:.4f}
        - **Rentabilidade M√©dia**: {resultado["Rentabilidade"].mean():.2f}%
        - **Prazo M√©dio**: {resultado["Prazo"].mean():.0f} dias
        - **Diversidade de T√≠tulos**: {resultado["Tipo Titulo"].nunique()}
        - **Risco (Desvio Padr√£o)**: {resultado["Rentabilidade"].std():.2f}%
        """)
        st.info("Veja a Fronteira de Pareto para comparar outros portf√≥lios n√£o-dominados.")

    # --- CONFIGURA√á√ïES AVAN√áADAS ---
    with tabs[3]:
        st.subheader("‚öôÔ∏è Par√¢metros Avan√ßados e Diversidade")
        diversidade_final = calcular_diversidade(pop)
        st.metric("Diversidade da Popula√ß√£o Final", f"{diversidade_final:.3f}")
        # Histograma de scores
        scores = [ind.fitness.values[0] for ind in pop]
        fig, ax = plt.subplots(figsize=(6, 4))
        ax.hist(scores, bins=20, alpha=0.7, color='green')
        ax.axvline(float(np.mean(scores)), color='red', linestyle='--', label='M√©dia')
        ax.set_title("Distribui√ß√£o de Scores da Popula√ß√£o Final")
        ax.set_xlabel("Score")
        ax.set_ylabel("Frequ√™ncia")
        ax.legend()
        st.pyplot(fig)

    # --- AJUDA/TUTORIAL ---
    with tabs[4]:
        st.subheader("‚ùì Como Usar o Otimizador de Portf√≥lio?")
        st.markdown("""
        1. Ajuste os par√¢metros na barra lateral conforme seu perfil de risco.
        2. Clique em "Rodar Otimiza√ß√£o" para gerar portf√≥lios.
        3. Navegue pelas abas para comparar portf√≥lios, ver detalhes e exportar resultados.
        4. Use a Fronteira de Pareto para escolher o portf√≥lio ideal para voc√™!
        """)

# Ajustar contraste dos gr√°ficos
plt.rcParams.update({'axes.labelcolor': '#FAFAFA', 'xtick.color': '#FAFAFA', 'ytick.color': '#FAFAFA', 'text.color': '#FAFAFA'})
