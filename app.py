import streamlit as st
import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
from deap import base, creator, tools, algorithms
import random
from datetime import datetime
from io import BytesIO
import requests
import time
import copy

# Configura√ß√£o da p√°gina com layout wide e √≠cone
st.set_page_config(page_title="GA Tesouro Direto Otimizador", layout="wide", page_icon="üìà")

# Injetar CSS personalizado para melhores efeitos visuais (cores, bot√µes, etc.)
st.markdown(
    """
    <style>
    .stButton > button {
        background-color: #4CAF50; /* Verde atraente */
        color: white;
        border: none;
        padding: 10px 20px;
        text-align: center;
        text-decoration: none;
        display: inline-block;
        font-size: 16px;
        margin: 4px 2px;
        cursor: pointer;
        border-radius: 12px;
        transition: background-color 0.3s;
    }
    .stButton > button:hover {
        background-color: #45a049;
    }
    .stSpinner > div {
        color: #4CAF50;
    }
    .stAlert {
        background-color: #f0f2f6;
        border-radius: 8px;
    }
    .element-container .stMarkdown {
        font-family: 'Arial', sans-serif;
    }
    </style>
    """,
    unsafe_allow_html=True
)

st.title("üìà Otimiza√ß√£o de Portf√≥lio - Tesouro Direto")

# Expander com explica√ß√£o resumida e visualmente atraente
with st.expander("‚ÑπÔ∏è Como o Score √© Calculado", expanded=False):
    st.markdown("""
    O **score** avalia seu portf√≥lio de Tesouro Direto com base em diferentes estrat√©gias. Escolha uma e otimize!

    - **M√©dia da Rentabilidade** üìä: M√©dia simples das taxas anuais. Ideal para simplicidade.
    - **Rentabilidade Total at√© o Vencimento** ‚è≥: Retorno composto total, considerando prazos.
    - **Rentabilidade Ajustada pelo Prazo** ‚öñÔ∏è: Penaliza prazos longos para equilibrar liquidez.
    - **Diversifica√ß√£o de Tipos** üåü: B√¥nus por variedade de t√≠tulos, reduzindo riscos.
    - **Sharpe Ratio** üìà: Retorno ajustado pelo risco (novo!).
    - **Multi-Objetivo** üéØ: Otimiza retorno, risco e diversifica√ß√£o simultaneamente.
    """)

# Fun√ß√£o para carregar dados com cache para efici√™ncia
@st.cache_data(ttl=3600)  # Cache por 1 hora
def carregar_dados():
    try:
        url = "https://www.tesourotransparente.gov.br/ckan/dataset/df56aa42-484a-4a59-8184-7676580c81e3/resource/796d2059-14e9-44e3-80c9-2d9e30b405c1/download/precotaxatesourodireto.csv"
        r = requests.get(url, stream=True, timeout=30)
        r.raise_for_status()
        content = BytesIO()
        for chunk in r.iter_content(1024):
            content.write(chunk)
        content.seek(0)
        df = pd.read_csv(content, sep=";", encoding="utf-8")
        
        # Processamento de dados
        df["Data Vencimento"] = pd.to_datetime(df["Data Vencimento"], dayfirst=True, errors="coerce")
        df["Data Base"] = pd.to_datetime(df["Data Base"], dayfirst=True, errors="coerce")
        df["Rentabilidade"] = df["Taxa Compra Manha"].str.replace(",", ".").astype(float)
        df["Prazo"] = (df["Data Vencimento"] - df["Data Base"]).dt.days
        return df
    except Exception as e:
        st.error(f"Erro ao carregar dados: {e}")
        return pd.DataFrame()

# Carregar dados com spinner visual
with st.spinner("üì• Baixando dados do Tesouro Direto..."):
    raw_df = carregar_dados()

# Filtrar t√≠tulos futuros
raw_df = raw_df[raw_df["Data Vencimento"] > datetime.now()].copy()

if raw_df.empty:
    st.error("Nenhum t√≠tulo com vencimento futuro dispon√≠vel. Tente novamente mais tarde.")
    st.stop()

st.success(f"‚úÖ {len(raw_df)} t√≠tulos com vencimento futuro carregados.")

# Exibir pr√©via dos dados em um expander para n√£o poluir a tela
with st.expander("üìã Pr√©via dos Dados", expanded=False):
    st.dataframe(raw_df.head())

# Sidebar com par√¢metros, organizado visualmente
st.sidebar.header("‚öôÔ∏è Par√¢metros do Algoritmo")
POP_SIZE = st.sidebar.slider("Tamanho da Popula√ß√£o", 50, 500, 100, step=50, help="N√∫mero de portf√≥lios iniciais.")
NGEN = st.sidebar.slider("M√°ximo de Gera√ß√µes", 10, 500, 100, step=10, help="Quantas itera√ß√µes o algoritmo far√°.")
CXPB = st.sidebar.slider("Probabilidade de Crossover", 0.5, 1.0, 0.7, step=0.05, help="Chance de combinar portf√≥lios.")
MUTPB = st.sidebar.slider("Probabilidade de Muta√ß√£o", 0.5, 1.0, 0.9, step=0.05, help="Chance de alterar portf√≥lios.")
N_ATIVOS = st.sidebar.slider("T√≠tulos por Portf√≥lio", 3, min(10, len(raw_df)), 5, help="Quantos t√≠tulos em cada portf√≥lio.")
estrategia = st.sidebar.selectbox("Estrat√©gia de Score", [
    "M√©dia da Rentabilidade",
    "Rentabilidade Total at√© o Vencimento",
    "Rentabilidade Ajustada pelo Prazo",
    "Diversifica√ß√£o de Tipos",
    "Sharpe Ratio",
    "Multi-Objetivo"
], help="Escolha como calcular o score.")

# Par√¢metros avan√ßados
st.sidebar.header("üîß Par√¢metros Avan√ßados")
ELITE_SIZE = st.sidebar.slider("Tamanho da Elite (%)", 5, 20, 10, step=5, help="Percentual dos melhores indiv√≠duos a preservar.")
TOURNAMENT_SIZE = st.sidebar.slider("Tamanho do Torneio", 2, 8, 4, step=1, help="Tamanho do torneio para sele√ß√£o.")
DIVERSITY_THRESHOLD = st.sidebar.slider("Limiar de Diversidade", 0.1, 0.9, 0.3, step=0.1, help="Limiar para reinicializa√ß√£o por diversidade.")

# Valida√ß√£o de par√¢metros
if len(raw_df) < N_ATIVOS:
    st.error(f"‚ùå Quantidade de t√≠tulos dispon√≠veis ({len(raw_df)}) √© menor que o n√∫mero por portf√≥lio ({N_ATIVOS}). Ajuste os par√¢metros.")
    st.stop()

# Configura√ß√µes do DEAP - CORRE√á√ÉO DOS ERROS DE LINTER
try:
    del creator.FitnessMax  # type: ignore
except:
    pass
try:
    del creator.Individual  # type: ignore
except:
    pass

# type: ignore - DEAP cria atributos dinamicamente
creator.create("FitnessMax", base.Fitness, weights=(1.0,))  # type: ignore
creator.create("Individual", list, fitness=creator.FitnessMax)  # type: ignore

# Fun√ß√µes auxiliares melhoradas
def gerar_indices():
    """Gera √≠ndices √∫nicos para representar um portf√≥lio"""
    return random.sample(range(len(raw_df)), N_ATIVOS)

def repair(ind):
    """Repara indiv√≠duo removendo duplicatas e garantindo tamanho correto"""
    unique = list(dict.fromkeys(ind))
    while len(unique) < N_ATIVOS:
        novo = random.randint(0, len(raw_df) - 1)
        if novo not in unique:
            unique.append(novo)
    return unique[:N_ATIVOS]

def calcular_diversidade(populacao):
    """Calcula a diversidade da popula√ß√£o baseada na dist√¢ncia m√©dia entre indiv√≠duos"""
    if len(populacao) < 2:
        return 0.0
    
    distancias = []
    for i in range(len(populacao)):
        for j in range(i+1, len(populacao)):
            # Dist√¢ncia baseada na sobreposi√ß√£o de t√≠tulos
            overlap = len(set(populacao[i]) & set(populacao[j])) / N_ATIVOS
            distancias.append(1 - overlap)
    
    return np.mean(distancias) if distancias else 0.0

# Operadores gen√©ticos melhorados
def crossover_uniforme(ind1, ind2):
    """Crossover uniforme melhorado para portf√≥lios"""
    child1 = []
    child2 = []
    
    # Usar m√°scara aleat√≥ria para decidir de qual pai pegar cada posi√ß√£o
    mask = [random.random() < 0.5 for _ in range(N_ATIVOS)]
    
    for i in range(N_ATIVOS):
        if mask[i]:
            child1.append(ind1[i])
            child2.append(ind2[i])
        else:
            child1.append(ind2[i])
            child2.append(ind1[i])
    
    # Reparar duplicatas
    child1 = repair(child1)
    child2 = repair(child2)
    
    return creator.Individual(child1), creator.Individual(child2)  # type: ignore

def mutacao_inteligente(ind, indpb=0.3):
    """Muta√ß√£o inteligente que preserva alguns t√≠tulos bons"""
    if random.random() < indpb:
        ind_copy = list(ind)
        
        # Muta√ß√£o por substitui√ß√£o parcial
        num_mutations = max(1, int(N_ATIVOS * 0.3))  # 30% dos t√≠tulos
        positions = random.sample(range(N_ATIVOS), num_mutations)
        
        for pos in positions:
            # Substituir por um t√≠tulo aleat√≥rio
            novo_titulo = random.randint(0, len(raw_df) - 1)
            while novo_titulo in ind_copy:
                novo_titulo = random.randint(0, len(raw_df) - 1)
            ind_copy[pos] = novo_titulo
        
        return creator.Individual(ind_copy),  # type: ignore
    return ind,

def mutacao_swap(ind, indpb=0.2):
    """Muta√ß√£o por troca de posi√ß√µes"""
    if random.random() < indpb:
        ind_copy = list(ind)
        # Trocar duas posi√ß√µes aleat√≥rias
        pos1, pos2 = random.sample(range(N_ATIVOS), 2)
        ind_copy[pos1], ind_copy[pos2] = ind_copy[pos2], ind_copy[pos1]
        return creator.Individual(ind_copy),  # type: ignore
    return ind,

def evaluate(ind):
    """Fun√ß√£o de avalia√ß√£o melhorada com m√∫ltiplas estrat√©gias"""
    try:
        selected = raw_df.iloc[ind]
        
        if estrategia == "M√©dia da Rentabilidade":
            return (selected["Rentabilidade"].mean(),)
        
        elif estrategia == "Rentabilidade Total at√© o Vencimento":
            anos = selected["Prazo"] / 365
            total = ((1 + selected["Rentabilidade"] / 100) ** anos - 1).mean()
            return (total * 100,)
        
        elif estrategia == "Rentabilidade Ajustada pelo Prazo":
            penalidade = 0.005 * selected["Prazo"].mean() / 365
            return (selected["Rentabilidade"].mean() - penalidade,)
        
        elif estrategia == "Diversifica√ß√£o de Tipos":
            tipos = selected["Tipo Titulo"].nunique()
            return (selected["Rentabilidade"].mean() + 0.5 * tipos,)
        
        elif estrategia == "Sharpe Ratio":
            retorno = selected["Rentabilidade"].mean()
            risco = selected["Rentabilidade"].std() or 0.1  # Evitar divis√£o por zero
            sharpe = retorno / risco if risco > 0 else 0
            return (sharpe,)
        
        elif estrategia == "Multi-Objetivo":
            # Retorno, risco e diversifica√ß√£o
            retorno = selected["Rentabilidade"].mean()
            risco = selected["Rentabilidade"].std() or 0.1
            diversidade = selected["Tipo Titulo"].nunique()
            # Score composto
            score = retorno - 0.5 * risco + 0.3 * diversidade
            return (score,)
        
        return (0.0,)
    except Exception as e:
        st.warning(f"Erro na avalia√ß√£o: {e}")
        return (0.0,)

# Cria toolbox e registrar fun√ß√µes melhoradas
toolbox = base.Toolbox()
toolbox.register("indices", gerar_indices)
toolbox.register("individual", tools.initIterate, creator.Individual, toolbox.indices)  # type: ignore
toolbox.register("population", tools.initRepeat, list, toolbox.individual)  # type: ignore
toolbox.register("mate", crossover_uniforme)
toolbox.register("mutate", mutacao_inteligente)
toolbox.register("mutate_swap", mutacao_swap)
toolbox.register("select", tools.selTournament, tournsize=TOURNAMENT_SIZE)
toolbox.register("evaluate", evaluate)

# Fun√ß√£o para plotar evolu√ß√£o com tema visual melhorado
def plot_evolucao(log):
    gens, melhores, medias = zip(*log) if log else ([], [], [])
    fig, ax = plt.subplots(figsize=(6, 4))
    plt.style.use('seaborn-v0_8')
    ax.plot(gens, melhores, label="Melhor Score", color='green', linewidth=2)
    ax.plot(gens, medias, label="M√©dia da Popula√ß√£o", color='blue', linestyle='--', linewidth=1.5)
    ax.set_title("Evolu√ß√£o da Otimiza√ß√£o", fontsize=12)
    ax.set_xlabel("Gera√ß√£o", fontsize=10)
    ax.set_ylabel("Score", fontsize=10)
    ax.legend(fontsize=8)
    ax.grid(True, linestyle='--', alpha=0.7)
    ax.tick_params(labelsize=8)
    fig.tight_layout()
    return fig

# Fun√ß√£o principal de otimiza√ß√£o melhorada
def rodar_otimizacao():
    """Algoritmo gen√©tico melhorado com diversidade e early stopping"""
    # Seed fixo para reproducibilidade
    random.seed(42)
    
    # Inicializar popula√ß√£o
    pop = toolbox.population(n=POP_SIZE)  # type: ignore
    for ind in pop:
        ind.fitness.values = toolbox.evaluate(ind)  # type: ignore

    # Placeholder para gr√°fico e barra de progresso
    grafico_area = st.empty()
    progress_bar = st.progress(0)
    log = []
    best_score = -np.inf
    no_improvement = 0
    early_stop_limit = 20  # Aumentado para dar mais chance
    elite_size = max(1, int(POP_SIZE * ELITE_SIZE / 100))

    for g in range(1, NGEN + 1):
        # Gerar offspring
        offspring = algorithms.varAnd(pop, toolbox, cxpb=CXPB, mutpb=MUTPB)
        
        # Reparar e avaliar offspring
        for ind in offspring:
            ind[:] = repair(ind)
            ind.fitness.values = toolbox.evaluate(ind)  # type: ignore

        # Elitismo melhorado
        elite = tools.selBest(pop, k=elite_size)
        pop = toolbox.select(pop + offspring, k=POP_SIZE - len(elite)) + elite  # type: ignore

        # Calcular m√©tricas
        melhor = tools.selBest(pop, k=1)[0]
        media = np.mean([i.fitness.values[0] for i in pop if i.fitness.valid])
        log.append((g, melhor.fitness.values[0], media))

        # Atualizar gr√°fico em tempo real
        fig = plot_evolucao(log)
        grafico_area.pyplot(fig)
        plt.close(fig)

        # Atualizar progresso
        progress_bar.progress(g / NGEN)

        # Early stopping melhorado
        if melhor.fitness.values[0] > best_score:
            best_score = melhor.fitness.values[0]
            no_improvement = 0
        else:
            no_improvement += 1
        
        # Verificar diversidade
        diversidade = calcular_diversidade(pop)
        if diversidade < DIVERSITY_THRESHOLD and g > 10:
            # Reinicializar parte da popula√ß√£o para manter diversidade
            num_reinit = int(POP_SIZE * 0.2)
            for _ in range(num_reinit):
                novo_ind = toolbox.individual()  # type: ignore
                novo_ind.fitness.values = toolbox.evaluate(novo_ind)  # type: ignore
                pop[random.randint(0, len(pop)-1)] = novo_ind
            st.info(f"üîÑ Reinicializa√ß√£o por diversidade na gera√ß√£o {g}")
        
        if no_improvement >= early_stop_limit:
            st.info(f"üõë Otimiza√ß√£o parou na gera√ß√£o {g} devido a estagna√ß√£o (sem melhorias).")
            break
        
        # Pequeno delay para efeito "tempo real"
        time.sleep(0.05)  # Reduzido para melhor performance

    return pop, log

# Bot√£o para rodar com estilo visual
if st.button("üöÄ Rodar Otimiza√ß√£o", help="Inicie a otimiza√ß√£o com os par√¢metros selecionados."):
    with st.spinner("üîÑ Otimizando portf√≥lio... Aguarde!"):
        pop, log = rodar_otimizacao()

        if not pop:
            st.error("‚ùå Erro na otimiza√ß√£o. Verifique os par√¢metros e tente novamente.")
            st.stop()

        # Exibir resultados em colunas para melhor layout
        col1, col2 = st.columns(2)
        with col1:
            st.subheader("üèÜ Melhor Portf√≥lio Encontrado")
            melhor = tools.selBest(pop, k=1)[0]
            resultado = raw_df.iloc[melhor].copy()
            resultado["Score"] = melhor.fitness.values[0]
            st.dataframe(resultado.style.format({"Rentabilidade": "{:.2f}%", "Prazo": "{:.0f} dias"}))

        with col2:
            st.subheader("üìä Detalhes do Melhor Portf√≥lio")
            st.markdown(f"""
            - **Score Final**: {melhor.fitness.values[0]:.4f}
            - **Estrat√©gia**: {estrategia}
            - **Rentabilidade M√©dia**: {resultado["Rentabilidade"].mean():.2f}%
            - **Prazo M√©dio**: {resultado["Prazo"].mean():.0f} dias
            - **Diversidade de T√≠tulos**: {resultado["Tipo Titulo"].nunique()}
            - **Risco (Desvio Padr√£o)**: {resultado["Rentabilidade"].std():.2f}%
            """)

        # Gr√°fico de Pareto em expander
        with st.expander("üìà Gr√°fico de Pareto (Risco vs. Retorno)", expanded=True):
            fig, ax = plt.subplots(figsize=(6, 4))
            plt.style.use('seaborn-v0_8')
            riscos = []
            retornos = []
            for ind in pop:
                dados = raw_df.iloc[ind]
                riscos.append(dados["Rentabilidade"].std() or 0)
                retornos.append(dados["Rentabilidade"].mean())

            ax.scatter(riscos, retornos, alpha=0.6, color='blue', label='Portf√≥lios')
            # Destacar o melhor
            melhor_dados = raw_df.iloc[melhor]
            ax.scatter(melhor_dados["Rentabilidade"].std() or 0, melhor_dados["Rentabilidade"].mean(), color='red', s=100, label='Melhor Portf√≥lio')
            ax.set_title("Fronteira de Pareto", fontsize=12)
            ax.set_xlabel("Risco (Desvio Padr√£o)", fontsize=10)
            ax.set_ylabel("Retorno M√©dio (%)", fontsize=10)
            ax.legend(fontsize=8)
            ax.grid(True, linestyle='--', alpha=0.7)
            ax.tick_params(labelsize=8)
            fig.tight_layout()
            st.pyplot(fig)

        # An√°lise de diversidade da popula√ß√£o final
        with st.expander("üåê An√°lise de Diversidade da Popula√ß√£o", expanded=False):
            diversidade_final = calcular_diversidade(pop)
            st.metric("Diversidade da Popula√ß√£o Final", f"{diversidade_final:.3f}")
            
            # Histograma de scores
            scores = [ind.fitness.values[0] for ind in pop]
            fig, ax = plt.subplots(figsize=(6, 4))
            ax.hist(scores, bins=20, alpha=0.7, color='green')
            ax.axvline(float(np.mean(scores)), color='red', linestyle='--', label='M√©dia')
            ax.set_title("Distribui√ß√£o de Scores da Popula√ß√£o Final")
            ax.set_xlabel("Score")
            ax.set_ylabel("Frequ√™ncia")
            ax.legend()
            st.pyplot(fig)
